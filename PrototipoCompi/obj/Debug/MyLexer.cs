//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Juan Miguel\Documents\Visual Studio 2013\Projects\PrototipoCompi\PrototipoCompi\MyLexer.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PrototipoCompi {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MyLexer : Lexer {
	public const int
		WS=1, NEWLINE=2, INT=3, STRING=4, BREAK=5, CLASS=6, PyCOMA=7, COMA=8, 
		ASIGN=9, PIZQ=10, PDER=11, SUMA=12, MUL=13, NUM=14, ID=15, STR=16, LQUOTE=17;
	public const int STRI = 1;
	public static string[] modeNames = {
		"DEFAULT_MODE", "STRI"
	};

	public static readonly string[] ruleNames = {
		"WS", "NEWLINE", "INT", "STRING", "BREAK", "CLASS", "PyCOMA", "COMA", 
		"ASIGN", "PIZQ", "PDER", "SUMA", "MUL", "NUM", "ID", "LQUOTE", "CharContenido", 
		"CharInicial", "STR", "TEXT"
	};


	public MyLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "' '", null, "'int'", "'string'", "'break'", "'class'", "';'", "','", 
		"'='", "'('", "')'", "'+'", "'*'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "INT", "STRING", "BREAK", "CLASS", "PyCOMA", "COMA", 
		"ASIGN", "PIZQ", "PDER", "SUMA", "MUL", "NUM", "ID", "STR", "LQUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x13}\b\x1\b\x1"+
		"\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b"+
		"\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF"+
		"\x4\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3"+
		"\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\a"+
		"\xF]\n\xF\f\xF\xE\xF`\v\xF\x5\xF\x62\n\xF\x3\x10\x3\x10\a\x10\x66\n\x10"+
		"\f\x10\xE\x10i\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12"+
		"\x5\x12r\n\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x2\x2\x2\x16\x4\x2\x3\x6\x2\x4\b\x2\x5\n\x2\x6\f\x2\a\xE"+
		"\x2\b\x10\x2\t\x12\x2\n\x14\x2\v\x16\x2\f\x18\x2\r\x1A\x2\xE\x1C\x2\xF"+
		"\x1E\x2\x10 \x2\x11\"\x2\x13$\x2\x2&\x2\x2(\x2\x12*\x2\x2\x4\x2\x3\x5"+
		"\x4\x2\f\f\xF\xF\x4\x2\x32;\x61\x61\x4\x2\x43\\\x63|}\x2\x4\x3\x2\x2\x2"+
		"\x2\x6\x3\x2\x2\x2\x2\b\x3\x2\x2\x2\x2\n\x3\x2\x2\x2\x2\f\x3\x2\x2\x2"+
		"\x2\xE\x3\x2\x2\x2\x2\x10\x3\x2\x2\x2\x2\x12\x3\x2\x2\x2\x2\x14\x3\x2"+
		"\x2\x2\x2\x16\x3\x2\x2\x2\x2\x18\x3\x2\x2\x2\x2\x1A\x3\x2\x2\x2\x2\x1C"+
		"\x3\x2\x2\x2\x2\x1E\x3\x2\x2\x2\x2 \x3\x2\x2\x2\x2\"\x3\x2\x2\x2\x3(\x3"+
		"\x2\x2\x2\x3*\x3\x2\x2\x2\x4,\x3\x2\x2\x2\x6\x30\x3\x2\x2\x2\b\x34\x3"+
		"\x2\x2\x2\n\x38\x3\x2\x2\x2\f?\x3\x2\x2\x2\xE\x45\x3\x2\x2\x2\x10K\x3"+
		"\x2\x2\x2\x12M\x3\x2\x2\x2\x14O\x3\x2\x2\x2\x16Q\x3\x2\x2\x2\x18S\x3\x2"+
		"\x2\x2\x1AU\x3\x2\x2\x2\x1CW\x3\x2\x2\x2\x1E\x61\x3\x2\x2\x2 \x63\x3\x2"+
		"\x2\x2\"j\x3\x2\x2\x2$q\x3\x2\x2\x2&s\x3\x2\x2\x2(u\x3\x2\x2\x2*y\x3\x2"+
		"\x2\x2,-\a\"\x2\x2-.\x3\x2\x2\x2./\b\x2\x2\x2/\x5\x3\x2\x2\x2\x30\x31"+
		"\t\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\b\x3\x2\x2\x33\a\x3\x2\x2\x2\x34"+
		"\x35\ak\x2\x2\x35\x36\ap\x2\x2\x36\x37\av\x2\x2\x37\t\x3\x2\x2\x2\x38"+
		"\x39\au\x2\x2\x39:\av\x2\x2:;\at\x2\x2;<\ak\x2\x2<=\ap\x2\x2=>\ai\x2\x2"+
		">\v\x3\x2\x2\x2?@\a\x64\x2\x2@\x41\at\x2\x2\x41\x42\ag\x2\x2\x42\x43\a"+
		"\x63\x2\x2\x43\x44\am\x2\x2\x44\r\x3\x2\x2\x2\x45\x46\a\x65\x2\x2\x46"+
		"G\an\x2\x2GH\a\x63\x2\x2HI\au\x2\x2IJ\au\x2\x2J\xF\x3\x2\x2\x2KL\a=\x2"+
		"\x2L\x11\x3\x2\x2\x2MN\a.\x2\x2N\x13\x3\x2\x2\x2OP\a?\x2\x2P\x15\x3\x2"+
		"\x2\x2QR\a*\x2\x2R\x17\x3\x2\x2\x2ST\a+\x2\x2T\x19\x3\x2\x2\x2UV\a-\x2"+
		"\x2V\x1B\x3\x2\x2\x2WX\a,\x2\x2X\x1D\x3\x2\x2\x2Y\x62\a\x32\x2\x2Z^\x4"+
		"\x33;\x2[]\x4\x32;\x2\\[\x3\x2\x2\x2]`\x3\x2\x2\x2^\\\x3\x2\x2\x2^_\x3"+
		"\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3\x2\x2\x2\x61Y\x3\x2\x2\x2\x61Z\x3\x2\x2"+
		"\x2\x62\x1F\x3\x2\x2\x2\x63g\x5&\x13\x2\x64\x66\x5$\x12\x2\x65\x64\x3"+
		"\x2\x2\x2\x66i\x3\x2\x2\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2h!\x3\x2\x2\x2"+
		"ig\x3\x2\x2\x2jk\a$\x2\x2kl\x3\x2\x2\x2lm\b\x11\x3\x2mn\b\x11\x4\x2n#"+
		"\x3\x2\x2\x2or\x5&\x13\x2pr\t\x3\x2\x2qo\x3\x2\x2\x2qp\x3\x2\x2\x2r%\x3"+
		"\x2\x2\x2st\t\x4\x2\x2t\'\x3\x2\x2\x2uv\a$\x2\x2vw\x3\x2\x2\x2wx\b\x14"+
		"\x5\x2x)\x3\x2\x2\x2yz\v\x2\x2\x2z{\x3\x2\x2\x2{|\b\x15\x3\x2|+\x3\x2"+
		"\x2\x2\b\x2\x3^\x61gq\x6\x2\x3\x2\x5\x2\x2\x4\x3\x2\x4\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PrototipoCompi
