//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Juan Miguel\Documents\Visual Studio 2013\Projects\PruebaRa\PruebaRa\MyParser.g4 by ANTLR 4.5-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace PruebaRa {

using System;

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MyParser : Parser {
	public const int
		WS=1, NEWLINE=2, TAB=3, BREAK=4, CLASS=5, CONST=6, ELSE=7, IF=8, NEW=9, 
		TRUE=10, FALSE=11, READ=12, RETURN=13, VOID=14, WHILE=15, WRITE=16, FOREACH=17, 
		FOR=18, PyCOMA=19, COMA=20, IGUAL=21, IGUALIGUAL=22, DIF=23, PIZQ=24, 
		PDER=25, SUMA=26, MASMAS=27, MUL=28, MENOS=29, MENOSMENOS=30, DIV=31, 
		EXCLA=32, NUMERAL=33, DOLAR=34, PORCEN=35, AMP=36, AMPAMP=37, PUNTO=38, 
		MENORQ=39, MENORIGUAL=40, MAYORQ=41, MAYORIGUAL=42, PREG=43, ARROBA=44, 
		GUIOBAJO=45, SQUOTE=46, VERTICAL=47, VERTICALVERTICAL=48, CORDER=49, CORIZQ=50, 
		CUADDER=51, CUADIZQ=52, COMENT=53, COMENTBLOCK1=54, COMENTBLOCK2=55, NUM=56, 
		ID=57, PRINTABLECHAR=58, CHARCONST=59, COMENTARIO=60, COMENTARIOBLOQUE=61, 
		STR=62, LQUOTE=63;
	public const int
		RULE_program = 0, RULE_consDecl = 1, RULE_varDecl = 2, RULE_classDecl = 3, 
		RULE_methodDecl = 4, RULE_formPars = 5, RULE_type = 6, RULE_statement = 7, 
		RULE_block = 8, RULE_actPars = 9, RULE_condition = 10, RULE_condterm = 11, 
		RULE_condFact = 12, RULE_expr = 13, RULE_term = 14, RULE_factor = 15, 
		RULE_designator = 16, RULE_relop = 17, RULE_addop = 18, RULE_mulop = 19;
	public static readonly string[] ruleNames = {
		"program", "consDecl", "varDecl", "classDecl", "methodDecl", "formPars", 
		"type", "statement", "block", "actPars", "condition", "condterm", "condFact", 
		"expr", "term", "factor", "designator", "relop", "addop", "mulop"
	};

	private static readonly string[] _LiteralNames = {
		null, "' '", null, "'\t'", "'break'", "'class'", "'const'", "'else'", 
		"'if'", "'new'", "'true'", "'false'", "'read'", "'return'", "'void'", 
		"'while'", "'write'", "'foreach'", "'for'", "';'", "','", "'='", "'=='", 
		"'!='", "'('", "')'", "'+'", "'++'", "'*'", "'-'", "'--'", "'/'", "'!'", 
		"'#'", "'$'", "'%'", "'&'", "'&&'", "'.'", "'<'", "'<='", "'>'", "'>='", 
		"'?'", "'@'", "'_'", "'''", "'|'", "'||'", "'}'", "'{'", "']'", "'['", 
		null, "'/*'", "'*/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "NEWLINE", "TAB", "BREAK", "CLASS", "CONST", "ELSE", "IF", 
		"NEW", "TRUE", "FALSE", "READ", "RETURN", "VOID", "WHILE", "WRITE", "FOREACH", 
		"FOR", "PyCOMA", "COMA", "IGUAL", "IGUALIGUAL", "DIF", "PIZQ", "PDER", 
		"SUMA", "MASMAS", "MUL", "MENOS", "MENOSMENOS", "DIV", "EXCLA", "NUMERAL", 
		"DOLAR", "PORCEN", "AMP", "AMPAMP", "PUNTO", "MENORQ", "MENORIGUAL", "MAYORQ", 
		"MAYORIGUAL", "PREG", "ARROBA", "GUIOBAJO", "SQUOTE", "VERTICAL", "VERTICALVERTICAL", 
		"CORDER", "CORIZQ", "CUADDER", "CUADIZQ", "COMENT", "COMENTBLOCK1", "COMENTBLOCK2", 
		"NUM", "ID", "PRINTABLECHAR", "CHARCONST", "COMENTARIO", "COMENTARIOBLOQUE", 
		"STR", "LQUOTE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	 
		public ProgramContext() { }
		public virtual void CopyFrom(ProgramContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProgramASTContext : ProgramContext {
		public ITerminalNode CLASS() { return GetToken(MyParser.CLASS, 0); }
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode CORIZQ() { return GetToken(MyParser.CORIZQ, 0); }
		public ITerminalNode CORDER() { return GetToken(MyParser.CORDER, 0); }
		public ConsDeclContext[] consDecl() {
			return GetRuleContexts<ConsDeclContext>();
		}
		public ConsDeclContext consDecl(int i) {
			return GetRuleContext<ConsDeclContext>(i);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclContext[] classDecl() {
			return GetRuleContexts<ClassDeclContext>();
		}
		public ClassDeclContext classDecl(int i) {
			return GetRuleContext<ClassDeclContext>(i);
		}
		public MethodDeclContext[] methodDecl() {
			return GetRuleContexts<MethodDeclContext>();
		}
		public MethodDeclContext methodDecl(int i) {
			return GetRuleContext<MethodDeclContext>(i);
		}
		public ProgramASTContext(ProgramContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterProgramAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitProgramAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgramAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			_localctx = new ProgramASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(CLASS);
			State = 41; Match(ID);
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << CONST) | (1L << ID))) != 0)) {
				{
				State = 45;
				switch (_input.La(1)) {
				case CONST:
					{
					State = 42; consDecl();
					}
					break;
				case ID:
					{
					State = 43; varDecl();
					}
					break;
				case CLASS:
					{
					State = 44; classDecl();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 50; Match(CORIZQ);
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VOID || _la==ID) {
				{
				{
				State = 51; methodDecl();
				}
				}
				State = 56;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 57; Match(CORDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConsDeclContext : ParserRuleContext {
		public ConsDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_consDecl; } }
	 
		public ConsDeclContext() { }
		public virtual void CopyFrom(ConsDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConsDeclASTContext : ConsDeclContext {
		public ITerminalNode CONST() { return GetToken(MyParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode IGUAL() { return GetToken(MyParser.IGUAL, 0); }
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public ITerminalNode NUM() { return GetToken(MyParser.NUM, 0); }
		public ITerminalNode CHARCONST() { return GetToken(MyParser.CHARCONST, 0); }
		public ConsDeclASTContext(ConsDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterConsDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitConsDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConsDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConsDeclContext consDecl() {
		ConsDeclContext _localctx = new ConsDeclContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_consDecl);
		int _la;
		try {
			_localctx = new ConsDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(CONST);
			State = 60; type();
			State = 61; Match(ID);
			State = 62; Match(IGUAL);
			State = 63;
			_la = _input.La(1);
			if ( !(_la==NUM || _la==CHARCONST) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 64; Match(PyCOMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDeclContext : ParserRuleContext {
		public VarDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDecl; } }
	 
		public VarDeclContext() { }
		public virtual void CopyFrom(VarDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VarDeclASTContext : VarDeclContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode[] ID() { return GetTokens(MyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MyParser.ID, i);
		}
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public ITerminalNode[] COMA() { return GetTokens(MyParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(MyParser.COMA, i);
		}
		public VarDeclASTContext(VarDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterVarDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitVarDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarDeclContext varDecl() {
		VarDeclContext _localctx = new VarDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_varDecl);
		int _la;
		try {
			_localctx = new VarDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; type();
			State = 67; Match(ID);
			State = 72;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMA) {
				{
				{
				State = 68; Match(COMA);
				State = 69; Match(ID);
				}
				}
				State = 74;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 75; Match(PyCOMA);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclContext : ParserRuleContext {
		public ClassDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDecl; } }
	 
		public ClassDeclContext() { }
		public virtual void CopyFrom(ClassDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassDeclASTContext : ClassDeclContext {
		public ITerminalNode CLASS() { return GetToken(MyParser.CLASS, 0); }
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode CORIZQ() { return GetToken(MyParser.CORIZQ, 0); }
		public ITerminalNode CORDER() { return GetToken(MyParser.CORDER, 0); }
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public ClassDeclASTContext(ClassDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterClassDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitClassDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclContext classDecl() {
		ClassDeclContext _localctx = new ClassDeclContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_classDecl);
		int _la;
		try {
			_localctx = new ClassDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(CLASS);
			State = 78; Match(ID);
			State = 79; Match(CORIZQ);
			State = 83;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 80; varDecl();
				}
				}
				State = 85;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 86; Match(CORDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
	 
		public MethodDeclContext() { }
		public virtual void CopyFrom(MethodDeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MethodDeclASTContext : MethodDeclContext {
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(MyParser.VOID, 0); }
		public FormParsContext formPars() {
			return GetRuleContext<FormParsContext>(0);
		}
		public VarDeclContext[] varDecl() {
			return GetRuleContexts<VarDeclContext>();
		}
		public VarDeclContext varDecl(int i) {
			return GetRuleContext<VarDeclContext>(i);
		}
		public MethodDeclASTContext(MethodDeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_methodDecl);
		int _la;
		try {
			_localctx = new MethodDeclASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			switch (_input.La(1)) {
			case ID:
				{
				State = 88; type();
				}
				break;
			case VOID:
				{
				State = 89; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 92; Match(ID);
			State = 93; Match(PIZQ);
			State = 96;
			switch (_input.La(1)) {
			case ID:
				{
				State = 94; formPars();
				}
				break;
			case PDER:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 98; Match(PDER);
			State = 102;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 99; varDecl();
				}
				}
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 105; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormParsContext : ParserRuleContext {
		public FormParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formPars; } }
	 
		public FormParsContext() { }
		public virtual void CopyFrom(FormParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FormParsASTContext : FormParsContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] ID() { return GetTokens(MyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MyParser.ID, i);
		}
		public ITerminalNode[] COMA() { return GetTokens(MyParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(MyParser.COMA, i);
		}
		public FormParsASTContext(FormParsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFormParsAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFormParsAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormParsContext formPars() {
		FormParsContext _localctx = new FormParsContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_formPars);
		int _la;
		try {
			_localctx = new FormParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; type();
			State = 108; Match(ID);
			State = 115;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMA) {
				{
				{
				State = 109; Match(COMA);
				State = 110; type();
				State = 111; Match(ID);
				}
				}
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TypeASTContext : TypeContext {
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode CUADIZQ() { return GetToken(MyParser.CUADIZQ, 0); }
		public ITerminalNode CUADDER() { return GetToken(MyParser.CUADDER, 0); }
		public TypeASTContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterTypeAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitTypeAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_type);
		try {
			_localctx = new TypeASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(ID);
			State = 122;
			switch (_input.La(1)) {
			case CUADIZQ:
				{
				State = 119; Match(CUADIZQ);
				State = 120; Match(CUADDER);
				}
				break;
			case ID:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatementREADASTContext : StatementContext {
		public ITerminalNode READ() { return GetToken(MyParser.READ, 0); }
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public StatementREADASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementREADAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementREADAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementREADAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementFORASTContext : StatementContext {
		public ITerminalNode FOR() { return GetToken(MyParser.FOR, 0); }
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode[] PyCOMA() { return GetTokens(MyParser.PyCOMA); }
		public ITerminalNode PyCOMA(int i) {
			return GetToken(MyParser.PyCOMA, i);
		}
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public StatementFORASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementFORAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementFORAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementFORAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementWHILEASTContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(MyParser.WHILE, 0); }
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementWHILEASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementWHILEAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementWHILEAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWHILEAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementWRITEASTContext : StatementContext {
		public ITerminalNode WRITE() { return GetToken(MyParser.WRITE, 0); }
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public ITerminalNode COMA() { return GetToken(MyParser.COMA, 0); }
		public ITerminalNode NUM() { return GetToken(MyParser.NUM, 0); }
		public StatementWRITEASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementWRITEAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementWRITEAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementWRITEAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementBlockASTContext : StatementContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementBlockASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementBlockAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementBlockAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementDesignatorASTContext : StatementContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public ITerminalNode IGUAL() { return GetToken(MyParser.IGUAL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public ITerminalNode MASMAS() { return GetToken(MyParser.MASMAS, 0); }
		public ITerminalNode MENOSMENOS() { return GetToken(MyParser.MENOSMENOS, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public StatementDesignatorASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementDesignatorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementDesignatorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementDesignatorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementRETURNASTContext : StatementContext {
		public ITerminalNode RETURN() { return GetToken(MyParser.RETURN, 0); }
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementRETURNASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementRETURNAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementRETURNAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementRETURNAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementPyCOMEASTContext : StatementContext {
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public StatementPyCOMEASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementPyCOMEAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementPyCOMEAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementPyCOMEAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementBREAKASTContext : StatementContext {
		public ITerminalNode BREAK() { return GetToken(MyParser.BREAK, 0); }
		public ITerminalNode PyCOMA() { return GetToken(MyParser.PyCOMA, 0); }
		public StatementBREAKASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementBREAKAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementBREAKAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBREAKAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StatementIFASTContext : StatementContext {
		public ITerminalNode IF() { return GetToken(MyParser.IF, 0); }
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MyParser.ELSE, 0); }
		public StatementIFASTContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterStatementIFAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitStatementIFAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementIFAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 198;
			switch (_input.La(1)) {
			case ID:
				_localctx = new StatementDesignatorASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; designator();
				State = 135;
				switch (_input.La(1)) {
				case IGUAL:
					{
					State = 125; Match(IGUAL);
					State = 126; expr();
					}
					break;
				case PIZQ:
					{
					State = 127; Match(PIZQ);
					State = 130;
					switch (_input.La(1)) {
					case NEW:
					case TRUE:
					case FALSE:
					case PIZQ:
					case MENOS:
					case NUM:
					case ID:
					case CHARCONST:
						{
						State = 128; actPars();
						}
						break;
					case PDER:
						{
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 132; Match(PDER);
					}
					break;
				case MASMAS:
					{
					State = 133; Match(MASMAS);
					}
					break;
				case MENOSMENOS:
					{
					State = 134; Match(MENOSMENOS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 137; Match(PyCOMA);
				}
				break;
			case IF:
				_localctx = new StatementIFASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 139; Match(IF);
				State = 140; Match(PIZQ);
				State = 141; condition();
				State = 142; Match(PDER);
				State = 143; statement();
				State = 147;
				switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					State = 144; Match(ELSE);
					State = 145; statement();
					}
					break;

				case 2:
					{
					}
					break;
				}
				}
				break;
			case FOR:
				_localctx = new StatementFORASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 149; Match(FOR);
				State = 150; Match(PIZQ);
				State = 151; expr();
				State = 152; Match(PyCOMA);
				State = 155;
				switch (_input.La(1)) {
				case NEW:
				case TRUE:
				case FALSE:
				case PIZQ:
				case MENOS:
				case NUM:
				case ID:
				case CHARCONST:
					{
					State = 153; condition();
					}
					break;
				case PyCOMA:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 157; Match(PyCOMA);
				State = 160;
				switch (_input.La(1)) {
				case BREAK:
				case IF:
				case READ:
				case RETURN:
				case WHILE:
				case WRITE:
				case FOR:
				case PyCOMA:
				case CORIZQ:
				case ID:
					{
					State = 158; statement();
					}
					break;
				case PDER:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 162; Match(PDER);
				State = 163; statement();
				}
				break;
			case WHILE:
				_localctx = new StatementWHILEASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 165; Match(WHILE);
				State = 166; Match(PIZQ);
				State = 167; condition();
				State = 168; Match(PDER);
				State = 169; statement();
				}
				break;
			case BREAK:
				_localctx = new StatementBREAKASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 171; Match(BREAK);
				State = 172; Match(PyCOMA);
				}
				break;
			case RETURN:
				_localctx = new StatementRETURNASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 173; Match(RETURN);
				State = 176;
				switch (_input.La(1)) {
				case NEW:
				case TRUE:
				case FALSE:
				case PIZQ:
				case MENOS:
				case NUM:
				case ID:
				case CHARCONST:
					{
					State = 174; expr();
					}
					break;
				case PyCOMA:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 178; Match(PyCOMA);
				}
				break;
			case READ:
				_localctx = new StatementREADASTContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 179; Match(READ);
				State = 180; Match(PIZQ);
				State = 181; designator();
				State = 182; Match(PDER);
				State = 183; Match(PyCOMA);
				}
				break;
			case WRITE:
				_localctx = new StatementWRITEASTContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 185; Match(WRITE);
				State = 186; Match(PIZQ);
				State = 187; expr();
				State = 191;
				switch (_input.La(1)) {
				case COMA:
					{
					State = 188; Match(COMA);
					State = 189; Match(NUM);
					}
					break;
				case PDER:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 193; Match(PDER);
				State = 194; Match(PyCOMA);
				}
				break;
			case CORIZQ:
				_localctx = new StatementBlockASTContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 196; block();
				}
				break;
			case PyCOMA:
				_localctx = new StatementPyCOMEASTContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 197; Match(PyCOMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	 
		public BlockContext() { }
		public virtual void CopyFrom(BlockContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockASTContext : BlockContext {
		public ITerminalNode CORIZQ() { return GetToken(MyParser.CORIZQ, 0); }
		public ITerminalNode CORDER() { return GetToken(MyParser.CORDER, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockASTContext(BlockContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterBlockAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitBlockAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			_localctx = new BlockASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(CORIZQ);
			State = 204;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BREAK) | (1L << IF) | (1L << READ) | (1L << RETURN) | (1L << WHILE) | (1L << WRITE) | (1L << FOR) | (1L << PyCOMA) | (1L << CORIZQ) | (1L << ID))) != 0)) {
				{
				{
				State = 201; statement();
				}
				}
				State = 206;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 207; Match(CORDER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActParsContext : ParserRuleContext {
		public ActParsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actPars; } }
	 
		public ActParsContext() { }
		public virtual void CopyFrom(ActParsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ActParsASTContext : ActParsContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COMA() { return GetTokens(MyParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(MyParser.COMA, i);
		}
		public ActParsASTContext(ActParsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterActParsAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitActParsAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActParsAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActParsContext actPars() {
		ActParsContext _localctx = new ActParsContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_actPars);
		int _la;
		try {
			_localctx = new ActParsASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; expr();
			State = 214;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMA) {
				{
				{
				State = 210; Match(COMA);
				State = 211; expr();
				}
				}
				State = 216;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionASTContext : ConditionContext {
		public CondtermContext[] condterm() {
			return GetRuleContexts<CondtermContext>();
		}
		public CondtermContext condterm(int i) {
			return GetRuleContext<CondtermContext>(i);
		}
		public ITerminalNode[] VERTICALVERTICAL() { return GetTokens(MyParser.VERTICALVERTICAL); }
		public ITerminalNode VERTICALVERTICAL(int i) {
			return GetToken(MyParser.VERTICALVERTICAL, i);
		}
		public ConditionASTContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterConditionAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitConditionAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_condition);
		int _la;
		try {
			_localctx = new ConditionASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; condterm();
			State = 222;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==VERTICALVERTICAL) {
				{
				{
				State = 218; Match(VERTICALVERTICAL);
				State = 219; condterm();
				}
				}
				State = 224;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondtermContext : ParserRuleContext {
		public CondtermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condterm; } }
	 
		public CondtermContext() { }
		public virtual void CopyFrom(CondtermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondtermASTContext : CondtermContext {
		public CondFactContext[] condFact() {
			return GetRuleContexts<CondFactContext>();
		}
		public CondFactContext condFact(int i) {
			return GetRuleContext<CondFactContext>(i);
		}
		public ITerminalNode[] AMPAMP() { return GetTokens(MyParser.AMPAMP); }
		public ITerminalNode AMPAMP(int i) {
			return GetToken(MyParser.AMPAMP, i);
		}
		public CondtermASTContext(CondtermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterCondtermAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitCondtermAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondtermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondtermContext condterm() {
		CondtermContext _localctx = new CondtermContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_condterm);
		int _la;
		try {
			_localctx = new CondtermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 225; condFact();
			State = 230;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==AMPAMP) {
				{
				{
				State = 226; Match(AMPAMP);
				State = 227; condFact();
				}
				}
				State = 232;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondFactContext : ParserRuleContext {
		public CondFactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condFact; } }
	 
		public CondFactContext() { }
		public virtual void CopyFrom(CondFactContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CondFactASTContext : CondFactContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public RelopContext relop() {
			return GetRuleContext<RelopContext>(0);
		}
		public CondFactASTContext(CondFactContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterCondFactAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitCondFactAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondFactAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondFactContext condFact() {
		CondFactContext _localctx = new CondFactContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_condFact);
		try {
			_localctx = new CondFactASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; expr();
			State = 234; relop();
			State = 235; expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprASTContext : ExprContext {
		public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ITerminalNode MENOS() { return GetToken(MyParser.MENOS, 0); }
		public AddopContext[] addop() {
			return GetRuleContexts<AddopContext>();
		}
		public AddopContext addop(int i) {
			return GetRuleContext<AddopContext>(i);
		}
		public ExprASTContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterExprAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitExprAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_expr);
		int _la;
		try {
			_localctx = new ExprASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			switch (_input.La(1)) {
			case MENOS:
				{
				State = 237; Match(MENOS);
				}
				break;
			case NEW:
			case TRUE:
			case FALSE:
			case PIZQ:
			case NUM:
			case ID:
			case CHARCONST:
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 241; term();
			State = 247;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==SUMA || _la==MENOS) {
				{
				{
				State = 242; addop();
				State = 243; term();
				}
				}
				State = 249;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TermASTContext : TermContext {
		public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		public MulopContext[] mulop() {
			return GetRuleContexts<MulopContext>();
		}
		public MulopContext mulop(int i) {
			return GetRuleContext<MulopContext>(i);
		}
		public TermASTContext(TermContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterTermAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitTermAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTermAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_term);
		int _la;
		try {
			_localctx = new TermASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; factor();
			State = 256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << PORCEN))) != 0)) {
				{
				{
				State = 251; mulop();
				State = 252; factor();
				}
				}
				State = 258;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
	 
		public FactorContext() { }
		public virtual void CopyFrom(FactorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FactorCHARCONSTASTContext : FactorContext {
		public ITerminalNode CHARCONST() { return GetToken(MyParser.CHARCONST, 0); }
		public FactorCHARCONSTASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFactorCHARCONSTAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFactorCHARCONSTAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorCHARCONSTAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorNEWASTContext : FactorContext {
		public ITerminalNode NEW() { return GetToken(MyParser.NEW, 0); }
		public ITerminalNode ID() { return GetToken(MyParser.ID, 0); }
		public ITerminalNode CUADIZQ() { return GetToken(MyParser.CUADIZQ, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CUADDER() { return GetToken(MyParser.CUADDER, 0); }
		public FactorNEWASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFactorNEWAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFactorNEWAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNEWAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorNUMASTContext : FactorContext {
		public ITerminalNode NUM() { return GetToken(MyParser.NUM, 0); }
		public FactorNUMASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFactorNUMAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFactorNUMAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorNUMAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorTrueFalseASTContext : FactorContext {
		public ITerminalNode TRUE() { return GetToken(MyParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MyParser.FALSE, 0); }
		public FactorTrueFalseASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFactorTrueFalseAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFactorTrueFalseAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorTrueFalseAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorDesignatorASTContext : FactorContext {
		public DesignatorContext designator() {
			return GetRuleContext<DesignatorContext>(0);
		}
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public ActParsContext actPars() {
			return GetRuleContext<ActParsContext>(0);
		}
		public FactorDesignatorASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFactorDesignatorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFactorDesignatorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorDesignatorAST(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FactorExprASTContext : FactorContext {
		public ITerminalNode PIZQ() { return GetToken(MyParser.PIZQ, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PDER() { return GetToken(MyParser.PDER, 0); }
		public FactorExprASTContext(FactorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterFactorExprAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitFactorExprAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactorExprAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_factor);
		int _la;
		try {
			State = 285;
			switch (_input.La(1)) {
			case ID:
				_localctx = new FactorDesignatorASTContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; designator();
				State = 267;
				switch (_input.La(1)) {
				case PIZQ:
					{
					State = 260; Match(PIZQ);
					State = 263;
					switch (_input.La(1)) {
					case NEW:
					case TRUE:
					case FALSE:
					case PIZQ:
					case MENOS:
					case NUM:
					case ID:
					case CHARCONST:
						{
						State = 261; actPars();
						}
						break;
					case PDER:
						{
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 265; Match(PDER);
					}
					break;
				case PyCOMA:
				case COMA:
				case IGUALIGUAL:
				case DIF:
				case PDER:
				case SUMA:
				case MUL:
				case MENOS:
				case DIV:
				case PORCEN:
				case AMPAMP:
				case MENORQ:
				case MENORIGUAL:
				case MAYORQ:
				case MAYORIGUAL:
				case VERTICALVERTICAL:
				case CUADDER:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUM:
				_localctx = new FactorNUMASTContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; Match(NUM);
				}
				break;
			case CHARCONST:
				_localctx = new FactorCHARCONSTASTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 270; Match(CHARCONST);
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new FactorTrueFalseASTContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 271;
				_la = _input.La(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				_errHandler.RecoverInline(this);
				} else {
					Consume();
				}
				}
				break;
			case NEW:
				_localctx = new FactorNEWASTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 272; Match(NEW);
				State = 273; Match(ID);
				State = 279;
				switch (_input.La(1)) {
				case CUADIZQ:
					{
					State = 274; Match(CUADIZQ);
					State = 275; expr();
					State = 276; Match(CUADDER);
					}
					break;
				case PyCOMA:
				case COMA:
				case IGUALIGUAL:
				case DIF:
				case PDER:
				case SUMA:
				case MUL:
				case MENOS:
				case DIV:
				case PORCEN:
				case AMPAMP:
				case MENORQ:
				case MENORIGUAL:
				case MAYORQ:
				case MAYORIGUAL:
				case VERTICALVERTICAL:
				case CUADDER:
					{
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PIZQ:
				_localctx = new FactorExprASTContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 281; Match(PIZQ);
				State = 282; expr();
				State = 283; Match(PDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignatorContext : ParserRuleContext {
		public DesignatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designator; } }
	 
		public DesignatorContext() { }
		public virtual void CopyFrom(DesignatorContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DesignatorASTContext : DesignatorContext {
		public ITerminalNode[] ID() { return GetTokens(MyParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MyParser.ID, i);
		}
		public ITerminalNode[] PUNTO() { return GetTokens(MyParser.PUNTO); }
		public ITerminalNode PUNTO(int i) {
			return GetToken(MyParser.PUNTO, i);
		}
		public ITerminalNode[] CUADIZQ() { return GetTokens(MyParser.CUADIZQ); }
		public ITerminalNode CUADIZQ(int i) {
			return GetToken(MyParser.CUADIZQ, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] CUADDER() { return GetTokens(MyParser.CUADDER); }
		public ITerminalNode CUADDER(int i) {
			return GetToken(MyParser.CUADDER, i);
		}
		public DesignatorASTContext(DesignatorContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterDesignatorAST(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitDesignatorAST(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesignatorAST(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DesignatorContext designator() {
		DesignatorContext _localctx = new DesignatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_designator);
		int _la;
		try {
			_localctx = new DesignatorASTContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(ID);
			State = 296;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==PUNTO || _la==CUADIZQ) {
				{
				State = 294;
				switch (_input.La(1)) {
				case PUNTO:
					{
					State = 288; Match(PUNTO);
					State = 289; Match(ID);
					}
					break;
				case CUADIZQ:
					{
					State = 290; Match(CUADIZQ);
					State = 291; expr();
					State = 292; Match(CUADDER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 298;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelopContext : ParserRuleContext {
		public ITerminalNode IGUALIGUAL() { return GetToken(MyParser.IGUALIGUAL, 0); }
		public ITerminalNode DIF() { return GetToken(MyParser.DIF, 0); }
		public ITerminalNode MAYORQ() { return GetToken(MyParser.MAYORQ, 0); }
		public ITerminalNode MAYORIGUAL() { return GetToken(MyParser.MAYORIGUAL, 0); }
		public ITerminalNode MENORQ() { return GetToken(MyParser.MENORQ, 0); }
		public ITerminalNode MENORIGUAL() { return GetToken(MyParser.MENORIGUAL, 0); }
		public RelopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterRelop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitRelop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelopContext relop() {
		RelopContext _localctx = new RelopContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_relop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IGUALIGUAL) | (1L << DIF) | (1L << MENORQ) | (1L << MENORIGUAL) | (1L << MAYORQ) | (1L << MAYORIGUAL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddopContext : ParserRuleContext {
		public ITerminalNode SUMA() { return GetToken(MyParser.SUMA, 0); }
		public ITerminalNode MENOS() { return GetToken(MyParser.MENOS, 0); }
		public AddopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterAddop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitAddop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddopContext addop() {
		AddopContext _localctx = new AddopContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_addop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			_la = _input.La(1);
			if ( !(_la==SUMA || _la==MENOS) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MulopContext : ParserRuleContext {
		public ITerminalNode MUL() { return GetToken(MyParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(MyParser.DIV, 0); }
		public ITerminalNode PORCEN() { return GetToken(MyParser.PORCEN, 0); }
		public MulopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mulop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.EnterMulop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyParserListener typedListener = listener as IMyParserListener;
			if (typedListener != null) typedListener.ExitMulop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyParserVisitor<TResult> typedVisitor = visitor as IMyParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MulopContext mulop() {
		MulopContext _localctx = new MulopContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_mulop);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << PORCEN))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x41\x134\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3\x2"+
		"\x3\x2\a\x2\x37\n\x2\f\x2\xE\x2:\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\a\x4I\n\x4\f\x4\xE\x4L\v"+
		"\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\a\x5T\n\x5\f\x5\xE\x5W\v\x5\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x5\x6]\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x63\n"+
		"\x6\x3\x6\x3\x6\a\x6g\n\x6\f\x6\xE\x6j\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\a\at\n\a\f\a\xE\aw\v\a\x3\b\x3\b\x3\b\x3\b\x5\b}\n\b\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x85\n\t\x3\t\x3\t\x3\t\x5\t\x8A\n\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\x96\n\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x5\t\x9E\n\t\x3\t\x3\t\x3\t\x5\t\xA3\n\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB3"+
		"\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x5\t\xC2\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xC9\n\t\x3\n\x3\n\a\n\xCD"+
		"\n\n\f\n\xE\n\xD0\v\n\x3\n\x3\n\x3\v\x3\v\x3\v\a\v\xD7\n\v\f\v\xE\v\xDA"+
		"\v\v\x3\f\x3\f\x3\f\a\f\xDF\n\f\f\f\xE\f\xE2\v\f\x3\r\x3\r\x3\r\a\r\xE7"+
		"\n\r\f\r\xE\r\xEA\v\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\xF2\n"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xF8\n\xF\f\xF\xE\xF\xFB\v\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\a\x10\x101\n\x10\f\x10\xE\x10\x104\v\x10\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x5\x11\x10A\n\x11\x3\x11\x3\x11\x5\x11\x10E\n\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5"+
		"\x11\x11A\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x120\n\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x129\n\x12\f\x12\xE\x12"+
		"\x12C\v\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x2\x2\x2"+
		"\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2"+
		"\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\a\x4\x2::==\x3\x2"+
		"\f\r\x4\x2\x18\x19),\x4\x2\x1C\x1C\x1F\x1F\x5\x2\x1E\x1E!!%%\x14D\x2*"+
		"\x3\x2\x2\x2\x4=\x3\x2\x2\x2\x6\x44\x3\x2\x2\x2\bO\x3\x2\x2\x2\n\\\x3"+
		"\x2\x2\x2\fm\x3\x2\x2\x2\xEx\x3\x2\x2\x2\x10\xC8\x3\x2\x2\x2\x12\xCA\x3"+
		"\x2\x2\x2\x14\xD3\x3\x2\x2\x2\x16\xDB\x3\x2\x2\x2\x18\xE3\x3\x2\x2\x2"+
		"\x1A\xEB\x3\x2\x2\x2\x1C\xF1\x3\x2\x2\x2\x1E\xFC\x3\x2\x2\x2 \x11F\x3"+
		"\x2\x2\x2\"\x121\x3\x2\x2\x2$\x12D\x3\x2\x2\x2&\x12F\x3\x2\x2\x2(\x131"+
		"\x3\x2\x2\x2*+\a\a\x2\x2+\x31\a;\x2\x2,\x30\x5\x4\x3\x2-\x30\x5\x6\x4"+
		"\x2.\x30\x5\b\x5\x2/,\x3\x2\x2\x2/-\x3\x2\x2\x2/.\x3\x2\x2\x2\x30\x33"+
		"\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3\x2\x2\x2"+
		"\x33\x31\x3\x2\x2\x2\x34\x38\a\x34\x2\x2\x35\x37\x5\n\x6\x2\x36\x35\x3"+
		"\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39"+
		";\x3\x2\x2\x2:\x38\x3\x2\x2\x2;<\a\x33\x2\x2<\x3\x3\x2\x2\x2=>\a\b\x2"+
		"\x2>?\x5\xE\b\x2?@\a;\x2\x2@\x41\a\x17\x2\x2\x41\x42\t\x2\x2\x2\x42\x43"+
		"\a\x15\x2\x2\x43\x5\x3\x2\x2\x2\x44\x45\x5\xE\b\x2\x45J\a;\x2\x2\x46G"+
		"\a\x16\x2\x2GI\a;\x2\x2H\x46\x3\x2\x2\x2IL\x3\x2\x2\x2JH\x3\x2\x2\x2J"+
		"K\x3\x2\x2\x2KM\x3\x2\x2\x2LJ\x3\x2\x2\x2MN\a\x15\x2\x2N\a\x3\x2\x2\x2"+
		"OP\a\a\x2\x2PQ\a;\x2\x2QU\a\x34\x2\x2RT\x5\x6\x4\x2SR\x3\x2\x2\x2TW\x3"+
		"\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3\x2\x2\x2WU\x3\x2\x2\x2XY\a"+
		"\x33\x2\x2Y\t\x3\x2\x2\x2Z]\x5\xE\b\x2[]\a\x10\x2\x2\\Z\x3\x2\x2\x2\\"+
		"[\x3\x2\x2\x2]^\x3\x2\x2\x2^_\a;\x2\x2_\x62\a\x1A\x2\x2`\x63\x5\f\a\x2"+
		"\x61\x63\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x61\x3\x2\x2\x2\x63\x64\x3\x2"+
		"\x2\x2\x64h\a\x1B\x2\x2\x65g\x5\x6\x4\x2\x66\x65\x3\x2\x2\x2gj\x3\x2\x2"+
		"\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2ik\x3\x2\x2\x2jh\x3\x2\x2\x2kl\x5\x12"+
		"\n\x2l\v\x3\x2\x2\x2mn\x5\xE\b\x2nu\a;\x2\x2op\a\x16\x2\x2pq\x5\xE\b\x2"+
		"qr\a;\x2\x2rt\x3\x2\x2\x2so\x3\x2\x2\x2tw\x3\x2\x2\x2us\x3\x2\x2\x2uv"+
		"\x3\x2\x2\x2v\r\x3\x2\x2\x2wu\x3\x2\x2\x2x|\a;\x2\x2yz\a\x36\x2\x2z}\a"+
		"\x35\x2\x2{}\x3\x2\x2\x2|y\x3\x2\x2\x2|{\x3\x2\x2\x2}\xF\x3\x2\x2\x2~"+
		"\x89\x5\"\x12\x2\x7F\x80\a\x17\x2\x2\x80\x8A\x5\x1C\xF\x2\x81\x84\a\x1A"+
		"\x2\x2\x82\x85\x5\x14\v\x2\x83\x85\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84"+
		"\x83\x3\x2\x2\x2\x85\x86\x3\x2\x2\x2\x86\x8A\a\x1B\x2\x2\x87\x8A\a\x1D"+
		"\x2\x2\x88\x8A\a \x2\x2\x89\x7F\x3\x2\x2\x2\x89\x81\x3\x2\x2\x2\x89\x87"+
		"\x3\x2\x2\x2\x89\x88\x3\x2\x2\x2\x8A\x8B\x3\x2\x2\x2\x8B\x8C\a\x15\x2"+
		"\x2\x8C\xC9\x3\x2\x2\x2\x8D\x8E\a\n\x2\x2\x8E\x8F\a\x1A\x2\x2\x8F\x90"+
		"\x5\x16\f\x2\x90\x91\a\x1B\x2\x2\x91\x95\x5\x10\t\x2\x92\x93\a\t\x2\x2"+
		"\x93\x96\x5\x10\t\x2\x94\x96\x3\x2\x2\x2\x95\x92\x3\x2\x2\x2\x95\x94\x3"+
		"\x2\x2\x2\x96\xC9\x3\x2\x2\x2\x97\x98\a\x14\x2\x2\x98\x99\a\x1A\x2\x2"+
		"\x99\x9A\x5\x1C\xF\x2\x9A\x9D\a\x15\x2\x2\x9B\x9E\x5\x16\f\x2\x9C\x9E"+
		"\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2"+
		"\x2\x9F\xA2\a\x15\x2\x2\xA0\xA3\x5\x10\t\x2\xA1\xA3\x3\x2\x2\x2\xA2\xA0"+
		"\x3\x2\x2\x2\xA2\xA1\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xA5\a\x1B\x2"+
		"\x2\xA5\xA6\x5\x10\t\x2\xA6\xC9\x3\x2\x2\x2\xA7\xA8\a\x11\x2\x2\xA8\xA9"+
		"\a\x1A\x2\x2\xA9\xAA\x5\x16\f\x2\xAA\xAB\a\x1B\x2\x2\xAB\xAC\x5\x10\t"+
		"\x2\xAC\xC9\x3\x2\x2\x2\xAD\xAE\a\x6\x2\x2\xAE\xC9\a\x15\x2\x2\xAF\xB2"+
		"\a\xF\x2\x2\xB0\xB3\x5\x1C\xF\x2\xB1\xB3\x3\x2\x2\x2\xB2\xB0\x3\x2\x2"+
		"\x2\xB2\xB1\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xC9\a\x15\x2\x2\xB5\xB6"+
		"\a\xE\x2\x2\xB6\xB7\a\x1A\x2\x2\xB7\xB8\x5\"\x12\x2\xB8\xB9\a\x1B\x2\x2"+
		"\xB9\xBA\a\x15\x2\x2\xBA\xC9\x3\x2\x2\x2\xBB\xBC\a\x12\x2\x2\xBC\xBD\a"+
		"\x1A\x2\x2\xBD\xC1\x5\x1C\xF\x2\xBE\xBF\a\x16\x2\x2\xBF\xC2\a:\x2\x2\xC0"+
		"\xC2\x3\x2\x2\x2\xC1\xBE\x3\x2\x2\x2\xC1\xC0\x3\x2\x2\x2\xC2\xC3\x3\x2"+
		"\x2\x2\xC3\xC4\a\x1B\x2\x2\xC4\xC5\a\x15\x2\x2\xC5\xC9\x3\x2\x2\x2\xC6"+
		"\xC9\x5\x12\n\x2\xC7\xC9\a\x15\x2\x2\xC8~\x3\x2\x2\x2\xC8\x8D\x3\x2\x2"+
		"\x2\xC8\x97\x3\x2\x2\x2\xC8\xA7\x3\x2\x2\x2\xC8\xAD\x3\x2\x2\x2\xC8\xAF"+
		"\x3\x2\x2\x2\xC8\xB5\x3\x2\x2\x2\xC8\xBB\x3\x2\x2\x2\xC8\xC6\x3\x2\x2"+
		"\x2\xC8\xC7\x3\x2\x2\x2\xC9\x11\x3\x2\x2\x2\xCA\xCE\a\x34\x2\x2\xCB\xCD"+
		"\x5\x10\t\x2\xCC\xCB\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2"+
		"\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD1\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD2"+
		"\a\x33\x2\x2\xD2\x13\x3\x2\x2\x2\xD3\xD8\x5\x1C\xF\x2\xD4\xD5\a\x16\x2"+
		"\x2\xD5\xD7\x5\x1C\xF\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6"+
		"\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2\xD9\x15\x3\x2\x2\x2\xDA\xD8\x3\x2\x2"+
		"\x2\xDB\xE0\x5\x18\r\x2\xDC\xDD\a\x32\x2\x2\xDD\xDF\x5\x18\r\x2\xDE\xDC"+
		"\x3\x2\x2\x2\xDF\xE2\x3\x2\x2\x2\xE0\xDE\x3\x2\x2\x2\xE0\xE1\x3\x2\x2"+
		"\x2\xE1\x17\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE8\x5\x1A\xE\x2\xE4\xE5"+
		"\a\'\x2\x2\xE5\xE7\x5\x1A\xE\x2\xE6\xE4\x3\x2\x2\x2\xE7\xEA\x3\x2\x2\x2"+
		"\xE8\xE6\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2\xE9\x19\x3\x2\x2\x2\xEA\xE8\x3"+
		"\x2\x2\x2\xEB\xEC\x5\x1C\xF\x2\xEC\xED\x5$\x13\x2\xED\xEE\x5\x1C\xF\x2"+
		"\xEE\x1B\x3\x2\x2\x2\xEF\xF2\a\x1F\x2\x2\xF0\xF2\x3\x2\x2\x2\xF1\xEF\x3"+
		"\x2\x2\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF9\x5\x1E\x10\x2"+
		"\xF4\xF5\x5&\x14\x2\xF5\xF6\x5\x1E\x10\x2\xF6\xF8\x3\x2\x2\x2\xF7\xF4"+
		"\x3\x2\x2\x2\xF8\xFB\x3\x2\x2\x2\xF9\xF7\x3\x2\x2\x2\xF9\xFA\x3\x2\x2"+
		"\x2\xFA\x1D\x3\x2\x2\x2\xFB\xF9\x3\x2\x2\x2\xFC\x102\x5 \x11\x2\xFD\xFE"+
		"\x5(\x15\x2\xFE\xFF\x5 \x11\x2\xFF\x101\x3\x2\x2\x2\x100\xFD\x3\x2\x2"+
		"\x2\x101\x104\x3\x2\x2\x2\x102\x100\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2"+
		"\x103\x1F\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x105\x10D\x5\"\x12\x2\x106"+
		"\x109\a\x1A\x2\x2\x107\x10A\x5\x14\v\x2\x108\x10A\x3\x2\x2\x2\x109\x107"+
		"\x3\x2\x2\x2\x109\x108\x3\x2\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10E\a\x1B"+
		"\x2\x2\x10C\x10E\x3\x2\x2\x2\x10D\x106\x3\x2\x2\x2\x10D\x10C\x3\x2\x2"+
		"\x2\x10E\x120\x3\x2\x2\x2\x10F\x120\a:\x2\x2\x110\x120\a=\x2\x2\x111\x120"+
		"\t\x3\x2\x2\x112\x113\a\v\x2\x2\x113\x119\a;\x2\x2\x114\x115\a\x36\x2"+
		"\x2\x115\x116\x5\x1C\xF\x2\x116\x117\a\x35\x2\x2\x117\x11A\x3\x2\x2\x2"+
		"\x118\x11A\x3\x2\x2\x2\x119\x114\x3\x2\x2\x2\x119\x118\x3\x2\x2\x2\x11A"+
		"\x120\x3\x2\x2\x2\x11B\x11C\a\x1A\x2\x2\x11C\x11D\x5\x1C\xF\x2\x11D\x11E"+
		"\a\x1B\x2\x2\x11E\x120\x3\x2\x2\x2\x11F\x105\x3\x2\x2\x2\x11F\x10F\x3"+
		"\x2\x2\x2\x11F\x110\x3\x2\x2\x2\x11F\x111\x3\x2\x2\x2\x11F\x112\x3\x2"+
		"\x2\x2\x11F\x11B\x3\x2\x2\x2\x120!\x3\x2\x2\x2\x121\x12A\a;\x2\x2\x122"+
		"\x123\a(\x2\x2\x123\x129\a;\x2\x2\x124\x125\a\x36\x2\x2\x125\x126\x5\x1C"+
		"\xF\x2\x126\x127\a\x35\x2\x2\x127\x129\x3\x2\x2\x2\x128\x122\x3\x2\x2"+
		"\x2\x128\x124\x3\x2\x2\x2\x129\x12C\x3\x2\x2\x2\x12A\x128\x3\x2\x2\x2"+
		"\x12A\x12B\x3\x2\x2\x2\x12B#\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12D\x12E"+
		"\t\x4\x2\x2\x12E%\x3\x2\x2\x2\x12F\x130\t\x5\x2\x2\x130\'\x3\x2\x2\x2"+
		"\x131\x132\t\x6\x2\x2\x132)\x3\x2\x2\x2!/\x31\x38JU\\\x62hu|\x84\x89\x95"+
		"\x9D\xA2\xB2\xC1\xC8\xCE\xD8\xE0\xE8\xF1\xF9\x102\x109\x10D\x119\x11F"+
		"\x128\x12A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace PruebaRa
